#!/usr/bin/env python

# __author__ = Firas S Midani
# __email__ = midani@bcm.edu

# Midani et al. (2020) Supp. Figure 5 is generated by this script 

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from matplotlib.ticker import MaxNLocator
     
sns.set_style('whitegrid')


def read_csv(foo): 

    # decide which isolate to use per project
    isolate_dict = {'cuevas':None,'dunphy':'Day0Anc','vervier':'8081c'}

    # read 
    df = pd.read_csv(foo,sep='\t',header=0,index_col=0)
    df = df.replace('Negative Control','Minimal Media')
 
    # include only PM 1 substrates or all if PM is unidentified
    if 'PM' in df.keys(): 
        df = df[df.PM==1]

    # subset to one isolate
    if 'Isolate' in df.keys():
        df = df[df.Isolate==isolate_dict[proj]]

    return df

# define colors (total of 9 including black for minimal media)
color_list = [(0.11,0.62,0.47),(0.85,0.37,0.01),(0.46,0.44,0.70),(0.91,0.16,0.54),
              (0.40,0.65,0.12),(0.90,0.67,0.01),(0.62,0.42,0.11),(0.36,0.36,0.36)]
color_list = [(0.00,0.00,0.00)] + color_list[::-1]

# global parameters
param = 'norm(mean(k_log))'
ax1_x = 'norm(mean(auc_log))'
ax1_y = 'norm(mean(gr))'
ax1_x_label = '     Normalized Area Under the Curve'
ax1_y_label = 'Normalized Growth Rate'
fontsize = 20

# initialize figure
fig, axes = plt.subplots(3,2,figsize=[19,21],sharey=False,sharex=False)

for cc,(proj,title) in enumerate(zip(['cuevas','dunphy','vervier'],
                      ['Citrobacter sedlakii','Pseudomonas aeruginosa','Yersinia enterocolitica'])):

    ax0,ax1 = axes[cc,:]

    # read summary files
    summ_split = read_csv('./non_cdiff/{}/working/summary/{}_split_summary_normalized.txt'.format(proj,proj))
    summ_poold = read_csv('./non_cdiff/{}/working/summary/{}_pooled_summary_normalized.txt'.format(proj,proj))

    # read curve files
    data_split = read_csv('./non_cdiff/{}/working/derived/{}_split_gp_data.txt'.format(proj,proj))
    data_poold = read_csv('./non_cdiff/{}/working/derived/{}_pooled_gp_data.txt'.format(proj,proj))



    # subset to the top 8 substrates based on {param}
    sub_summ_poold = summ_poold.sort_values([param],ascending=False).head(8)
    substrates = list(sub_summ_poold.Substrate.values) + ['Minimal Media']
    sub_summ_poold = summ_poold[summ_poold.Substrate.isin(substrates)]

    # subset data accordingly
    sub_data_poold = data_poold[data_poold.Substrate.isin(substrates)]
    sub_data_poold = sub_data_poold.pivot(index='Time',columns='Substrate',values='mu')

    # pre-generate figure text labels
    label_locations = sub_data_poold.iloc[-1,:].sort_values() # sort based on final time point measurement
    num_labels = label_locations.shape[0]
    label_locations = pd.DataFrame(np.linspace(0.05,0.95,num_labels),columns=['label'],index=label_locations.index)
    substrates_ordered = label_locations.index.values
    label_locations = label_locations.to_dict('dict')['label']

    # plot curves and points
    for (s),color in zip(substrates_ordered,color_list):

        # plot pooled fit
        ax0.plot(sub_data_poold.index,sub_data_poold.loc[:,s].values,lw=4,alpha=0.65,color=color)

        # add substrate labels
        ax0.text(1.05,label_locations[s], s, transform=ax0.transAxes,fontsize=fontsize,va='center',color=color)

        # plot parameters
        xx,yy = sub_summ_poold[sub_summ_poold.Substrate==s].loc[:,[ax1_x,ax1_y]].values[0]
        ax1.scatter(xx,yy,s=500,color=color,edgecolor='white',alpha=0.8,zorder=5)

    # remove grid
    ax0.grid(False)
    ax1.grid(False)

    # remove spines
    [ax0.spines[ii].set(lw=0) for ii in ['top','bottom','right','left']]
    [ax1.spines[ii].set(lw=0) for ii in ['top','bottom','right','left']]

    # explicitly add axes
    ax0.axhline(0,0,1,lw=2,color='black',zorder=2)
    ax0.axvline(0,0,1,lw=2,color='black',zorder=2)
    ax1.axhline(1,0,1,lw=2,color='black',zorder=2)
    ax1.axvline(1,0,1,lw=2,color='black',zorder=2)

    # adjust tick labels
    [ii.set(fontsize=fontsize) for ii in ax0.get_xticklabels()+ax0.get_yticklabels()]
    [ii.set(fontsize=fontsize) for ii in ax1.get_xticklabels()+ax1.get_yticklabels()]
    [ii.set_major_locator(MaxNLocator(integer=True)) for ii in [ax0.xaxis,ax0.yaxis,ax1.xaxis,ax1.yaxis]]

    # adjust axes labels
    ax0.set_xlabel('Time (hours)',fontsize=fontsize)
    ax0.set_ylabel('ln OD',fontsize=fontsize)
    ax1.set_xlabel(ax1_x_label,fontsize=fontsize)
    ax1.set_ylabel(ax1_y_label,fontsize=fontsize)

    # adjust title
    italicized = '$\it{{{}}}$'.format(title.replace(' ','\:'))
    ax0.set_title(italicized,fontsize=fontsize,y=1.05)
    ax1.set_title(italicized,fontsize=fontsize,y=1.05)

    # adjust spacing
    plt.subplots_adjust(wspace=1.0,hspace=0.35)

# # adjust spacing between panels
# plt.subplots_adjust(hspace=0.23,wspace=0.8)

# # add panel letters
# axes[0,0].text(transform=axes[0,0].transAxes,x=-0.225,y=1,ha='left',va='top',s='A',fontsize=30,fontweight='bold')
# axes[1,0].text(transform=axes[1,0].transAxes,x=-0.225,y=1,ha='left',va='top',s='B',fontsize=30,fontweight='bold')
# axes[0,1].text(transform=axes[0,1].transAxes,x=-0.225,y=1,ha='left',va='top',s='C',fontsize=30,fontweight='bold')
# axes[1,1].text(transform=axes[1,1].transAxes,x=-0.225,y=1,ha='left',va='top',s='D',fontsize=30,fontweight='bold')

filename='Midani_AMiGA_Supp_Figure_5'
plt.savefig('./figures/{}.pdf'.format(filename),bbox_inches='tight')

