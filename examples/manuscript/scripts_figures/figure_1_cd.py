#!/usr/bin/env python

# __author__ = Firas S Midani
# __email__ = midani@bcm.edu

# Midani et al. (2020) Figures 1C and 1D are generated by this script 

import os
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from scipy.stats import norm
from distutils.spawn import find_executable

sns.set_style('whitegrid')

def read_csv(foo):
	'''
	Read tab-separated file with header and index column.
	'''

	return pd.read_csv(foo,sep='\t',header=0,index_col=0)

def getLatentFunction(df,order=0,add_noise=False):
    '''
    Get arrays for time, mean, lower and upper bounds of confidence interval. 

    Args:
    	df (pandas.DataFrame): in the format of gp_data from AMiGA, so columns must
    		include 'mu','mu1','Sigma','Sigma1','Noise'.
    	order (int): choose zero-order (0) or fist-order derivative (1).
    	add_noise (boolean): whether to include estimated noise to confidence intervals.
    '''

    time = df.Time.values
    
    if order==0:
        mu = df.mu.values
        Sigma = df.Sigma.values
        if add_noise: Sigma = Sigma + df.Noise.values
    else:
        mu = df.mu1.values
        Sigma = df.Sigma1.values
            
    scaler = norm.ppf(0.95)
    
    low = mu - scaler*np.sqrt(Sigma)
    upp = mu + scaler*np.sqrt(Sigma) 
    
    return time,mu,low,upp

# read model estimated parameters
summ_df ='./death/summary/CD2058_Low_Glucose_pooled_summary.txt'
diux_df = './death/summary/CD2058_Low_Glucose_pooled_diauxie.txt'
summ_df = read_csv(summ_df)
diux_df = read_csv(diux_df)


# read model input and prediction of curves
split_df ='./death/derived/CD2058_Low_Glucose_split_gp_data.txt'
poold_df = './death/derived/CD2058_Low_Glucose_pooled_gp_data.txt'
    
split = read_csv(split_df)
poold = read_csv(poold_df)


# initialze figure
fig, ax = plt.subplots(2,1,figsize=[6,12],sharey=False)

# plot OD(t)
ax[0].plot(poold.Time,poold.mu,color=(0.11,0.62,0.47,.8),lw=5,zorder=5)
t,mu,low,upp = getLatentFunction(poold,order=0,add_noise=True)
ax[0].fill_between(t,low,upp,color=(0.11,0.62,0.47,0.1),zorder=2)
ax[0].axhline(0,0,1,color=(.0,.0,.0,.8),ls='-',lw=2)

# plot dOD(t)/dt
ax[1].plot(poold.Time,poold.mu1,color=(0.11,0.62,0.47,.8),lw=5,zorder=5)
ax[1].axhline(0,0,1,color=(.0,.0,.0,.8),ls='-',lw=2)

# plot raw measurements
raw = split.pivot(index='Time',columns='Sample_ID',values='GP_Input')
ax[0].plot(raw.index,raw.values,color=(0.5,0.5,0.5,.8))


# adjust ticks and labels
def largeTickLabels(ax): [ii.set(fontsize=20,fontname='Arial') for ii in ax.get_xticklabels()+ax.get_yticklabels()]
largeTickLabels(ax[0])
largeTickLabels(ax[1])

plt.setp(ax[0],yticks=np.linspace(0,3,4),zorder=4);
plt.setp(ax[0],yticks=np.linspace(0,2,5),zorder=4);

plt.setp(ax[1],yticks=np.linspace(-0.2,0.6,5));
plt.setp(ax[1],yticks=np.linspace(-0.2,0.4,4));

ax[1].set_xlabel('Time (hours)',fontsize=20)
ax[0].set_ylabel('ln OD',fontsize=20)
ax[1].set_ylabel('d/dt  ln OD',fontsize=20)
#t = ax[0].set_title('CD2058 on 20 mM glucose',fontsize=20,y=1.05)


# adjust window limits
ax[0].set_xlim([0,25])
ax[1].set_xlim([0,25])
ax[0].set_ylim([-0.05,2.30])
ax[1].set_ylim([-0.22,0.52])


# add phase divider
tshift = diux_df.loc[0,'dx_tf'].values[0]
ax[0].axvline(tshift,0,.99,ls='--',lw=2,color=(0,0,0,.8),zorder=1)
ax[1].axvline(tshift,0,.99,ls='--',lw=2,color=(0,0,0,.8),zorder=1)


# get unique phase parameters
xr1,xr2 = diux_df.loc[0,'dx_t_gr'].values
xk1,xk2 = diux_df.loc[0,'dx_t_k'].values
r1,r2 = diux_df.loc[0,'dx_gr'].values
K1,K2 = diux_df.loc[0,'dx_k_log'].values


# annotate carrying capacity and growth rate for each phase
x0 = tshift/2
x1 = tshift + (ax[0].get_xlim()[1]-tshift)/2
y0 = ax[0].get_ylim()[1]
y1 = ax[1].get_ylim()[1]

ax[0].text(x=x0,y=y0,va='top',ha='center',s='$K_1$ = {:.2f}'.format(K1),fontsize=20,transform=ax[0].transData)
ax[0].text(x=x1,y=y0,va='top',ha='center',s='$K_2$ = {:.2f}'.format(K2),fontsize=20,transform=ax[0].transData)

ax[1].text(x=x0,y=y1,va='top',ha='center',s='$r_1$ = {:.2f}'.format(r1),fontsize=20,transform=ax[1].transData)
ax[1].text(x=x1,y=y1,va='top',ha='center',s='$r_2$ = {:.2f}'.format(r2),fontsize=20,transform=ax[1].transData)

## General figue aesthetics
plt.subplots_adjust(hspace=0.23)

[ax[0].spines[ii].set(lw=0) for ii in ['top','bottom','right']]
[ax[1].spines[ii].set(lw=0) for ii in ['top','bottom','right']]

ax[0].spines['left'].set(lw=2,color=(0,0,0,0.8))
ax[1].spines['left'].set(lw=2,color=(0,0,0,0.8))

ax[0].grid(False)
ax[1].grid(False)


# save figure as PDF and convert to EPS
filename = 'Midani_AMiGA_Figure_1_cd'
plt.savefig('./figures/{}.pdf'.format(filename),bbox_inches='tight')
