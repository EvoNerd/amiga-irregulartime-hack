#!/usr/bin/env python

# __author__ = Firas S Midani
# __email__ = midani@bcm.edu

# Midani et al. (2020) Figure 3 is generated by this script 

import sys
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from scipy.stats import norm

# custom functions
def read_csv(foo):
    return pd.read_csv(foo,sep='\t',header=0,index_col=0)

def subsetDf(df,criteria):
    
    for k,v in criteria.items():
        if not isinstance(v,list): criteria[k] = [v]
    
    return df[df.isin(criteria).sum(1)==len(criteria)]

def conf_int(conf=.975,std=None,m=None):
    '''
    Compute 95% confidence interval.
    '''
    
    from scipy.stats import norm
    
    h = std*norm.ppf(conf)
    if (m is not None):
        return m, m-h, m+h
    else:
        return h

def getLatentFunction(df,order=0,add_noise=False):
    '''
    Get arrays for time, mean, lower and upper bounds of confidence interval. 

    Args:
    	df (pandas.DataFrame): in the format of gp_data from AMiGA, so columns must
    		include 'mu','mu1','Sigma','Sigma1','Noise'.
    	order (int): choose zero-order (0) or fist-order derivative (1).
    	add_noise (boolean): whether to include estimated noise to confidence intervals.
    '''

    time = df.Time.values
    
    if order==0:
        mu = df.mu.values
        Sigma = df.Sigma.values
        if add_noise: Sigma = Sigma + df.Noise.values
    else:
        mu = df.mu1.values
        Sigma = df.Sigma1.values
            
    scaler = norm.ppf(0.95)
    
    low = mu - scaler*np.sqrt(Sigma)
    upp = mu + scaler*np.sqrt(Sigma) 
    
    return time,mu,low,upp

def largeTickLabels(ax,fontsize=20):
    [ii.set(fontsize=fontsize) for ii in ax.get_xticklabels()+ax.get_yticklabels()]

def plot_growth_only(df_pred,df_data,df_summ,criteria,fig_ax=None,plot_raw=False,add_noise=False,fontsize=20,color=None,label=None,alpha=1,fill_alpha=0.1):
    
    # if user does not pass an axis object
    if fig_ax is None: fig,ax = plt.subplots(2,1,figsize=[5,10],sharex=True)
    else: ax = fig_ax

    fit = subsetDf(df_pred,criteria).sort_values(['Time']) # get predictions
    
    # plot growth function
    x,y,ymin,ymax = getLatentFunction(fit,order=0,add_noise=add_noise)
    ax.plot(x,y,color=color,lw=5,label=label,alpha=alpha)
    ax.fill_between(x,ymin,ymax,color=color,alpha=fill_alpha)
    largeTickLabels(ax,fontsize=fontsize-10)
    
    if plot_raw:
        summ_idx = list(subsetDf(df_summ,criteria).index.values)
        data_idx = df_data[df_data.Sample_ID.isin(summ_idx)]
        data_idx = pd.pivot(data_idx,index='Time',columns='Sample_ID',values='GP_Input')
        time = data_idx.index.values
        data = data_idx.values
        
        ax.plot(time,data,color=color,alpha=0.5,lw=0.5)
        
def getOverlap(a,b):
    return max(0,min(a[1],b[1]) - max(a[0],b[0]))
    

def addSubPlot(df,param,label,ax,ylims=None,fontsize=20,colors=None,alpha=0.3):
    
    m = 'mean({})'.format(param)
    s = 'std({})'.format(param)

    ind = np.arange(len(df.Ribotype.unique()))
    width = 0.35
    
    hv1 = df[df.Concentration=='Low'][m].values
    he1 = df[df.Concentration=='Low'][s]
    he1 = he1.apply(lambda x: conf_int(0.975,x))
    intv1 = [[ii-jj,ii+jj] for ii,jj in zip(hv1,he1)]
    
    ax.bar(ind-width/2, hv1,width,yerr=he1,label='Low',zorder=2,
           alpha=alpha,color=colors[0],error_kw=dict(lw=2,zorder=4),lw=2)

    hv2 = df[df.Concentration=='High'][m].values
    he2 = df[df.Concentration=='High'][s]
    he2 = he2.apply(lambda x: conf_int(0.975,x))
    intv2 = [[ii-jj,ii+jj] for ii,jj in zip(hv2,he2)]

    ax.bar(ind+width/2, hv2,width,yerr=he2,label='High',zorder=2,
           alpha=alpha,color=colors[1],error_kw=dict(lw=2,zorder=4),lw=2)
    
    overlap = [getOverlap(ii,jj) for ii,jj in zip(intv1,intv2)]
    overlap = np.where(np.array(overlap)==0)[0]
    
    if ylims is None:
        ymin,ymax = ax.get_ylim()
        band = 0.1*(ymax-ymin)
        ax.set_ylim([ymin,ymax+band])
    else:
        ax.set_ylim([ylims[0],ylims[1]])

    xmin,xmax = ax.get_xlim()
    xband = xmax-xmin
    for sig in overlap:
        x = (sig-xmin)/xband
        ax.text(x,.95,'*',transform=ax.transAxes,fontsize=40,va='top',ha='center')    
        
    ax.set_title(label,fontsize=fontsize)
    plt.setp(ax,xticks=ind,xticklabels=df.Ribotype.unique())
    
    largeTickLabels(ax,fontsize=fontsize-10)
    
def addSigs(ax,centers,values,color='k'):
    
    width=0.66
    ls = [ii-width/2 for ii in centers]
    rs = [ii+width/2 for ii in centers]
    
    xmin,xmax = ax.get_xlim()
    xband = xmax-xmin
    for l,r,v in zip(ls,rs,values):
        ax.axhline(v,(l-xmin)/xband,(r-xmin)/xband,color=color,lw=3,zorder=10,label='10% FDR Theshold',)


# define directory
parent = './death'

# read raw data
df_split = read_csv('{}/derived/split_gp_data.txt'.format(parent))
df_split_summ = read_csv('{}/summary/split_summary.txt'.format(parent))


# read model estimated parameters and predictions
df_summ = read_csv('{}/summary/pooled_summary.txt'.format(parent))
df_data = read_csv('{}/derived/pooled_gp_data.txt'.format(parent))

# get Gaussian noise estimates
sigma = df_data.loc[:,['Ribotype','Substrate','Concentration','Noise']].drop_duplicates()

# plot

# initialize figuer
fig,axes_all = plt.subplots(5,4,figsize=[28,25],sharex=False,sharey=False)
fontsize = 30

## top panel of grwoth curves
axes = axes_all[0:2,:]

# set parameters for plot_growth_only()
color_dict = {'None':(0.4,0.4,0.4),'Low':'#4daf4a','High':'#984ea3'}
kwargs = {'df_pred':df_data,'df_data':df_split,'df_summ':df_split_summ,
          'plot_raw':False,'add_noise':True,
          'alpha':1,'fill_alpha':0.15,'fontsize':30}

col_varbs = ['RT001','RT027','RT053','RT078']
row_varbs = ['Glucose','Fructose']

ss = {'RT001':2,'RT053':2,'RT078':3,'RT027':4}

## plot top panel of growth curves

for jj,rt in enumerate(col_varbs):
    for ii,st in enumerate(row_varbs):
        
        ax = axes[ii,jj]
        
        criteria0 = {'Substrate':'Water', 'Ribotype':rt,'Concentration':'None'}
        criteria1 = {'Substrate':st, 'Ribotype':rt,'Concentration':'Low'}
        criteria2 = {'Substrate':st, 'Ribotype':rt,'Concentration':'High'}

        plot_growth_only(criteria=criteria0,fig_ax=ax,color=color_dict['None'],label='None',**kwargs); 
        plot_growth_only(criteria=criteria1,fig_ax=ax,color=color_dict['Low'],label='Low',**kwargs);
        plot_growth_only(criteria=criteria2,fig_ax=ax,color=color_dict['High'],label='High',**kwargs);

        # adjust y labels
        if jj==len(col_varbs)-1:
            axes[ii,jj].yaxis.set(label_position="right")
            axes[ii,jj].set_ylabel(st,fontsize=fontsize,labelpad=25)
        elif jj==0:
            axes[ii,jj].set_ylabel('ln OD',fontsize=fontsize,labelpad=20)
            
        # adjust x labels
        if ii==0:
            axes[ii,jj].set_title(rt,fontsize=fontsize,y=1.1)
        elif ii==len(row_varbs)-1:
            axes[ii,jj].set_xlabel('Time (hours)',fontsize=fontsize,labelpad=20)
        
        # adjust window sizes
        ax.set_ylim([-0.3,2.3])
        ax.set_xlim([0,24])
        
        # adjust tick labels
        plt.setp(ax,xticks=np.linspace(0,24,4))
        plt.setp(ax,yticks=np.linspace(0,2,3))

# middle panel (whitespace): add legend
handles, labels = axes[0,0].get_legend_handles_labels()
lgd = axes[0,0].legend(handles, labels, loc='upper center',bbox_to_anchor=(2.5,-1.75),fontsize=30,ncol=3)

## delete middle panel axes
[fig.delaxes(ax) for ax in axes_all[2,:]];

## bottom panel for summary statistics (AUC, Growth Rate, Death Rate)
axes = axes_all[3:,:]

## set parameters for addSubPlot()
kwargs = {'colors':['#4daf4a','#984ea3'],'alpha':0.6,'fontsize':fontsize}

criteria0 = {'Ribotype':['RT001','RT053','RT027','RT078'],'Substrate':['Glucose']}
criteria1 = {'Ribotype':['RT001','RT053','RT027','RT078'],'Substrate':['Fructose']}

tmp0 = subsetDf(df_summ,criteria0).sort_values('Ribotype')
tmp1 = subsetDf(df_summ,criteria1).sort_values('Ribotype')

addSubPlot(tmp0,'auc_log','',axes[0,0],**kwargs)
addSubPlot(tmp0,'gr','',axes[0,1],**kwargs)
addSubPlot(tmp0,'dr','',axes[0,2],**kwargs)

addSubPlot(tmp1,'auc_log','',axes[1,0],**kwargs)
addSubPlot(tmp1,'gr','',axes[1,1],**kwargs)
addSubPlot(tmp1,'dr','',axes[1,2],**kwargs)

## add titles
kwargs = {'fontsize':30,'rotation':0,'ha':'center','va':'center','x':0.5,'y':1.15}
tx1 = axes[0,0].text(transform=axes[0,0].transAxes,s='Area Under the Curve',**kwargs)
tx2 = axes[0,1].text(transform=axes[0,1].transAxes,s='Growth Rate',**kwargs)
tx3 = axes[0,2].text(transform=axes[0,2].transAxes,s='Death Rate',**kwargs)
tx4 = axes[0,3].text(transform=axes[0,3].transAxes,s=r'Gaussian Noise ($\sigma_{noise}$)',**kwargs)
    
## bottom right panels for gaussian noise
ind = np.arange(len(sigma.Ribotype.unique()))
width = 0.35

for ax,sub in zip(axes_all[3:,-1],['Glucose','Fructose']):

    sub_df = subsetDf(sigma,{'Substrate':[sub,'Low']})
    sub_df = sub_df.pivot(index='Concentration',columns='Ribotype',values='Noise')
    
    ax.bar(ind-width/2,sub_df.loc['Low',:].values,width=width,label='Low',color='#4daf4a',alpha=0.6)
    ax.bar(ind+width/2,sub_df.loc['High',:].values,width=width,label='High',color='#984ea3',alpha=0.6)

    plt.setp(ax,xticks=ind,xticklabels=sub_df.keys())
    plt.setp(ax,yticks=np.linspace(0,0.05,6))
        
# adjust y limits
[ax.set_ylim([0,50]) for ax in axes_all[3:,0]];
[ax.set_ylim([0,0.5]) for ax in axes_all[3:,1]];
[ax.set_ylim([-0.4,0.1]) for ax in axes_all[3:,2]];
[ax.set_ylim([0.0,0.05]) for ax in axes_all[3:,3]];

# adjust sugar labels
axes_all[3,-1].yaxis.set(label_position="right") 
axes_all[3,-1].set_ylabel('Glucose',fontsize=fontsize,labelpad=25)

axes_all[4,-1].yaxis.set(label_position="right") 
axes_all[4,-1].set_ylabel('Fructose',fontsize=fontsize,labelpad=25)

# adjust tick label sizes
[largeTickLabels(ax,fontsize-10) for ax in np.ravel(axes)];

# adjust spaces and save
plt.subplots_adjust(wspace=0.3)

# save figure as PDF and convert to EPS
filename = 'Midani_AMiGA_Figure_3'
plt.savefig('./figures/{}.pdf'.format(filename),bbox_inches='tight')